/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Quickhatch_art (https://sketchfab.com/Quickhatch_art)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/shiba-deadpool-c2b3c2a3786047c0b36ce38aec2c2f09
title: Shiba Deadpool
*/
// npx gltfjsx ./src/3d/<name>.glb

import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei';

export default function Shiba({...props}) {
  const group = useRef();
  const { nodes, materials } = useGLTF('/shiba_deadpool.glb');

  const unique = props.unique;
  const setActive = props.setActive;
  
  let modelInstance = props.instance;
  let prevPos = modelInstance.pos;
  console.log('Prev position = '+prevPos);
  var mouseLoc = {x:prevPos[0], y:prevPos[1], z:prevPos[2]};
  const setPos = props.setPos;

  function onMouseMove(event) {
    if(modelInstance.ortho){
      mouseLoc.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouseLoc.z = - ((event.clientY) / window.innerHeight) * 2 + 1;

      mouseLoc.x = Math.round(mouseLoc.x * window.innerWidth* 1.25)/100;
      mouseLoc.z = Math.round(mouseLoc.z * window.innerHeight *-1.25)/100;

      // Grid-locking can be made optional
      // mouseLoc.x = Math.round(mouseLoc.x);
      // mouseLoc.z = Math.round(mouseLoc.z);
      // Can also create a movement limiter based on grid (and Ground) size
    }
  }

  useFrame((state) => {
    // group.current.position.set(mouseLoc.x, mouseLoc.y, mouseLoc.z);
    group.current.position.set(mouseLoc.x, 1, mouseLoc.z);
  });
  
  return (
    <group 
      {...props} 
      ref={group}
      // rotation={[0,Math.PI/2,0]}
      scale={1}
      dispose={null}
      onPointerDown={(event) =>{
        event.stopPropagation();
        document.addEventListener('mousemove', onMouseMove);
      }} 
      onPointerUp={(event) =>{
        event.stopPropagation();
        document.removeEventListener('mousemove',onMouseMove);
        var [x,y,z] = [mouseLoc.x,mouseLoc.y,mouseLoc.z];
        console.log('key I try to use: ' + unique);
        setPos([x,y,z], unique);
      }}
      onClick={() => {
        setActive(unique);
      }}
    >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Object_2.geometry} material={materials.body} />
        <mesh geometry={nodes.Object_3.geometry} material={materials.collar} />
        <mesh geometry={nodes.Object_4.geometry} material={materials.eyes} />
        {/* <mesh geometry={nodes.Object_4.geometry} material={materials.eyes} material-color={'yellow'} /> */}
        <mesh geometry={nodes.Object_5.geometry} material={materials.face} />
        <mesh geometry={nodes.Object_6.geometry} material={materials.orecchie}  />
        <mesh geometry={nodes.Object_7.geometry} material={materials.tail} />
        <mesh geometry={nodes.Object_8.geometry} material={materials.zampe_post} />
        <mesh geometry={nodes.Object_9.geometry} material={materials.zampre_ant} />
      </group>
    </group>
  )
}

useGLTF.preload('/shiba_deadpool.glb')
